JSX: 
JSX n’est rien d’autre qu’une expression

Cette approche est acceptable pour se former ou réaliser des démos simples. 

Cependant, elle va ralentir l’affichage de votre site, elle n’est donc pas adaptée pour la production.

Au lieu de séparer artificiellement les technologies en mettant le balisage et la logique 
dans des fichiers séparés, React sépare les préoccupations via des unités faiblement couplées
appelées « composants », qui contiennent les deux.

Dans la mesure où JSX est plus proche de JavaScript que de HTML, React DOM utilise la casse camelCase 
comme convention de nommage des propriétés, au lieu des noms d’attributs HTML.
Par exemple, class devient className en JSX, et tabindex devient tabIndex.

Ces objets sont appelés des « éléments React ». Vous pouvez les considérer comme des descriptions de
ce que vous voulez voir sur l’écran. React lit ces objets et les utilise pour construire le DOM
et le tenir à jour.

Les éléments React sont immuables. Une fois votre élément créé, vous ne pouvez plus modifier ses enfants 
ou ses attributs. Un élément est comme une image d’un film à un instant T : il représente l’interface 
utilisateur à un point précis dans le temps.

React DOM compare l’élément et ses enfants avec la version précédente, et applique uniquement 
les mises à jour DOM nécessaires pour refléter l’état voulu.

Les composants vous permettent de découper l’interface utilisateur en éléments indépendants 
et réutilisables, vous permettant ainsi de considérer chaque élément de manière isolée.

Conceptuellement, les composants sont comme des fonctions JavaScript. Ils acceptent des entrées 
quelconques (appelées « props ») et renvoient des éléments React décrivant ce qui doit apparaître 
à l’écran.

Un composant peut etre definie comme etant :
    - une fonction (le moyen la plus simple) : elle accepte un seul argument « props » 
    - une classe

Des éléments peuvent également représenter des composants définis par l’utilisateur :
    - const element = <Wellcome name="mugen" />

Lorsque React rencontre un élément représentant un composant défini par l’utilisateur, il transmet 
les attributs JSX et les enfants à ce composant sous la forme d’un objet unique. Nous appelons 
cet objet « props ».

React considère les composants commençant par des lettres minuscules comme des balises DOM

Les props sont en lecture seule :
Que vous déclariez un composant sous forme de fonction ou de classe, il ne doit jamais modifier
ses propres props. 

Ces fonctions sont dites « pures » parce qu’elles ne tentent pas de modifier leurs entrées et 
retournent toujours le même résultat pour les mêmes entrées.

NB: Tout composant React doit agir comme une fonction pure vis-à-vis de ses props.

















